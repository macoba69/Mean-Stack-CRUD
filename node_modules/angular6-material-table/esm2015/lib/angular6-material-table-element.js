/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import cloneDeep from 'lodash.clonedeep';
/**
 * @template T
 */
export class TableElement {
    /**
     * @param {?} init
     */
    constructor(init) {
        Object.assign(this, init);
        this.fillValidatorFromData();
        if (this.validator) {
            if (this.editing) {
                this.validator.enable();
            }
            else {
                this.validator.disable();
            }
        }
    }
    /**
     * @return {?}
     */
    get currentData() {
        //express hack
        if (this.validator) {
            return Object.assign(this._currentData, this.validator.getRawValue());
        }
        else {
            return this._currentData;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set currentData(value) {
        this._currentData = value;
        this.fillValidatorFromData();
    }
    /**
     * @return {?}
     */
    fillValidatorFromData() {
        if (this.validator) {
            let /** @type {?} */ formData = {};
            for (let /** @type {?} */ key in this.validator.controls) {
                formData[key] = this._currentData[key];
            }
            this.validator.setValue(formData);
        }
    }
    /**
     * @return {?}
     */
    delete() {
        this.source.delete(this.id);
    }
    /**
     * @return {?}
     */
    confirmEditCreate() {
        this.originalData = undefined;
        if (this.id == -1)
            return this.source.confirmCreate(this);
        else
            return this.source.confirmEdit(this);
    }
    /**
     * @return {?}
     */
    startEdit() {
        this.originalData = cloneDeep(this.currentData);
        this.editing = true;
        this.validator.enable();
    }
    /**
     * @return {?}
     */
    cancelOrDelete() {
        if (this.id == -1 || !this.editing)
            this.delete();
        else {
            this.currentData = this.originalData;
            this.editing = false;
            this.validator.disable();
        }
    }
}
function TableElement_tsickle_Closure_declarations() {
    /** @type {?} */
    TableElement.prototype.id;
    /** @type {?} */
    TableElement.prototype.editing;
    /** @type {?} */
    TableElement.prototype._currentData;
    /** @type {?} */
    TableElement.prototype.originalData;
    /** @type {?} */
    TableElement.prototype.source;
    /** @type {?} */
    TableElement.prototype.validator;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjYtbWF0ZXJpYWwtdGFibGUtZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXI2LW1hdGVyaWFsLXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXI2LW1hdGVyaWFsLXRhYmxlLWVsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLE9BQU8sU0FBUyxNQUFNLGtCQUFrQixDQUFDOzs7O0FBRXpDLE1BQU07Ozs7SUFxQkosWUFBWSxJQUE4QjtRQUN4QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUM3QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNuQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUN6QjtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDMUI7U0FDRjtLQUNGOzs7O0lBeEJELElBQUksV0FBVzs7UUFFYixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNuQixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUN2RTtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDMUI7S0FDRjs7Ozs7SUFFRCxJQUFJLFdBQVcsQ0FBQyxLQUFLO1FBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0tBQzlCOzs7O0lBY0QscUJBQXFCO1FBQ25CLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25CLHFCQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDbEIsR0FBRyxDQUFDLENBQUMscUJBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDeEMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDeEM7WUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuQztLQUNGOzs7O0lBRUQsTUFBTTtRQUNKLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM3Qjs7OztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBQzlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUk7WUFDRixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEM7Ozs7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDekI7Ozs7SUFFRCxjQUFjO1FBQ1osRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDakMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDMUI7S0FDRjtDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGb3JtR3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCB7VGFibGVEYXRhU291cmNlfSBmcm9tICcuL2FuZ3VsYXI2LW1hdGVyaWFsLXRhYmxlLWRhdGEtc291cmNlJztcclxuXHJcbmltcG9ydCBjbG9uZURlZXAgZnJvbSAnbG9kYXNoLmNsb25lZGVlcCc7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFibGVFbGVtZW50PFQ+IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIGVkaXRpbmc6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfY3VycmVudERhdGE/OiBUO1xyXG4gIG9yaWdpbmFsRGF0YTogVDtcclxuICBzb3VyY2U6IFRhYmxlRGF0YVNvdXJjZTxUPjtcclxuICB2YWxpZGF0b3I6IEZvcm1Hcm91cDtcclxuICBnZXQgY3VycmVudERhdGEoKSB7XHJcbiAgICAvL2V4cHJlc3MgaGFja1xyXG4gICAgaWYgKHRoaXMudmFsaWRhdG9yKSB7XHJcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHRoaXMuX2N1cnJlbnREYXRhLCB0aGlzLnZhbGlkYXRvci5nZXRSYXdWYWx1ZSgpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50RGF0YTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldCBjdXJyZW50RGF0YSh2YWx1ZSkge1xyXG4gICAgdGhpcy5fY3VycmVudERhdGEgPSB2YWx1ZTtcclxuICAgIHRoaXMuZmlsbFZhbGlkYXRvckZyb21EYXRhKCk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihpbml0OiBQYXJ0aWFsPFRhYmxlRWxlbWVudDxUPj4pIHtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgaW5pdCk7XHJcbiAgICB0aGlzLmZpbGxWYWxpZGF0b3JGcm9tRGF0YSgpO1xyXG4gICAgaWYgKHRoaXMudmFsaWRhdG9yKSB7XHJcbiAgICAgIGlmICh0aGlzLmVkaXRpbmcpIHtcclxuICAgICAgICB0aGlzLnZhbGlkYXRvci5lbmFibGUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnZhbGlkYXRvci5kaXNhYmxlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbGxWYWxpZGF0b3JGcm9tRGF0YSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnZhbGlkYXRvcikge1xyXG4gICAgICBsZXQgZm9ybURhdGEgPSB7fTtcclxuICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudmFsaWRhdG9yLmNvbnRyb2xzKSB7XHJcbiAgICAgICAgZm9ybURhdGFba2V5XSA9IHRoaXMuX2N1cnJlbnREYXRhW2tleV07XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy52YWxpZGF0b3Iuc2V0VmFsdWUoZm9ybURhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVsZXRlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zb3VyY2UuZGVsZXRlKHRoaXMuaWQpO1xyXG4gIH1cclxuXHJcbiAgY29uZmlybUVkaXRDcmVhdGUoKTogYm9vbGVhbiB7XHJcbiAgICB0aGlzLm9yaWdpbmFsRGF0YSA9IHVuZGVmaW5lZDtcclxuICAgIGlmICh0aGlzLmlkID09IC0xKVxyXG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2UuY29uZmlybUNyZWF0ZSh0aGlzKTtcclxuICAgIGVsc2VcclxuICAgICAgcmV0dXJuIHRoaXMuc291cmNlLmNvbmZpcm1FZGl0KHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgc3RhcnRFZGl0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5vcmlnaW5hbERhdGEgPSBjbG9uZURlZXAodGhpcy5jdXJyZW50RGF0YSk7XHJcbiAgICB0aGlzLmVkaXRpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy52YWxpZGF0b3IuZW5hYmxlKCk7XHJcbiAgfVxyXG5cclxuICBjYW5jZWxPckRlbGV0ZSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmlkID09IC0xIHx8ICF0aGlzLmVkaXRpbmcpXHJcbiAgICAgIHRoaXMuZGVsZXRlKCk7XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5jdXJyZW50RGF0YSA9IHRoaXMub3JpZ2luYWxEYXRhO1xyXG4gICAgICB0aGlzLmVkaXRpbmcgPSBmYWxzZTtcclxuICAgICAgdGhpcy52YWxpZGF0b3IuZGlzYWJsZSgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=