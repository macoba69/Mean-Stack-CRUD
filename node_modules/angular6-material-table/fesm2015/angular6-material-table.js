import cloneDeep from 'lodash.clonedeep';
import { Injectable } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { DataSource } from '@angular/cdk/collections';
import { BehaviorSubject, Subject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class TableElement {
    /**
     * @param {?} init
     */
    constructor(init) {
        Object.assign(this, init);
        this.fillValidatorFromData();
        if (this.validator) {
            if (this.editing) {
                this.validator.enable();
            }
            else {
                this.validator.disable();
            }
        }
    }
    /**
     * @return {?}
     */
    get currentData() {
        //express hack
        if (this.validator) {
            return Object.assign(this._currentData, this.validator.getRawValue());
        }
        else {
            return this._currentData;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set currentData(value) {
        this._currentData = value;
        this.fillValidatorFromData();
    }
    /**
     * @return {?}
     */
    fillValidatorFromData() {
        if (this.validator) {
            let /** @type {?} */ formData = {};
            for (let /** @type {?} */ key in this.validator.controls) {
                formData[key] = this._currentData[key];
            }
            this.validator.setValue(formData);
        }
    }
    /**
     * @return {?}
     */
    delete() {
        this.source.delete(this.id);
    }
    /**
     * @return {?}
     */
    confirmEditCreate() {
        this.originalData = undefined;
        if (this.id == -1)
            return this.source.confirmCreate(this);
        else
            return this.source.confirmEdit(this);
    }
    /**
     * @return {?}
     */
    startEdit() {
        this.originalData = cloneDeep(this.currentData);
        this.editing = true;
        this.validator.enable();
    }
    /**
     * @return {?}
     */
    cancelOrDelete() {
        if (this.id == -1 || !this.editing)
            this.delete();
        else {
            this.currentData = this.originalData;
            this.editing = false;
            this.validator.disable();
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DefaultValidatorService {
    /**
     * @return {?}
     */
    getRowValidator() {
        return new FormGroup({});
    }
}
DefaultValidatorService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class TableDataSource extends DataSource {
    /**
     * Creates a new TableDataSource instance, that can be used as datasource of `\@angular/cdk` data-table.
     * @param {?} data Array containing the initial values for the TableDataSource. If not specified, then `dataType` must be specified.
     * @param {?=} dataType Type of data contained by the Table. If not specified, then `data` with at least one element must be specified.
     * @param {?=} validatorService Service that create instances of the FormGroup used to validate row fields.
     * @param {?=} config Additional configuration for table.
     */
    constructor(data, dataType, validatorService, config = { prependNewElements: false }) {
        super();
        this.validatorService = validatorService;
        this.config = config;
        if (!validatorService)
            this.validatorService = new DefaultValidatorService();
        if (dataType) {
            this.dataConstructor = dataType;
        }
        else {
            if (data && data.length > 0)
                this.dataKeys = Object.keys(data[0]);
            else
                throw new Error('You must define either a non empty array, or an associated class to build the table.');
        }
        this.rowsSubject = new BehaviorSubject(this.getRowsFromData(data));
        this.datasourceSubject = new Subject();
    }
    /**
     * Start the creation of a new element, pushing an empty-data row in the table.
     * @return {?}
     */
    createNew() {
        const /** @type {?} */ source = this.rowsSubject.getValue();
        if (!this.existsNewElement(source)) {
            const /** @type {?} */ newElement = new TableElement({
                id: -1,
                editing: true,
                currentData: this.createNewObject(),
                source: this,
                validator: this.validatorService.getRowValidator(),
            });
            if (this.config.prependNewElements) {
                this.rowsSubject.next([newElement].concat(source));
            }
            else {
                source.push(newElement);
                this.rowsSubject.next(source);
            }
        }
    }
    /**
     * Confirm creation of the row. Save changes and disable editing.
     * If validation active and row data is invalid, it doesn't confirm creation neither disable editing.
     * @param {?} row Row to be confirmed.
     * @return {?}
     */
    confirmCreate(row) {
        if (!row.validator.valid) {
            return false;
        }
        const /** @type {?} */ source = this.rowsSubject.getValue();
        row.id = source.length - 1;
        this.rowsSubject.next(source);
        row.editing = false;
        row.validator.disable();
        this.updateDatasourceFromRows(source);
        return true;
    }
    /**
     * Confirm edition of the row. Save changes and disable editing.
     * If validation active and row data is invalid, it doesn't confirm editing neither disable editing.
     * @param {?} row Row to be edited.
     * @return {?}
     */
    confirmEdit(row) {
        if (!row.validator.valid) {
            return false;
        }
        const /** @type {?} */ source = this.rowsSubject.getValue();
        const /** @type {?} */ index = this.getIndexFromRowId(row.id, source);
        source[index] = row;
        this.rowsSubject.next(source);
        row.editing = false;
        row.validator.disable();
        this.updateDatasourceFromRows(source);
        return true;
    }
    /**
     * Delete the row with the index specified.
     * @param {?} id
     * @return {?}
     */
    delete(id) {
        const /** @type {?} */ source = this.rowsSubject.getValue();
        const /** @type {?} */ index = this.getIndexFromRowId(id, source);
        source.splice(index, 1);
        this.updateRowIds(index, source);
        this.rowsSubject.next(source);
        if (id != -1)
            this.updateDatasourceFromRows(source);
    }
    /**
     * Get row from the table.
     * @param {?} id Id of the row to retrieve, -1 returns the current new line.
     * @return {?}
     */
    getRow(id) {
        const /** @type {?} */ source = this.rowsSubject.getValue();
        const /** @type {?} */ index = this.getIndexFromRowId(id, source);
        return (index >= 0 && index < source.length) ? source[index] : null;
    }
    /**
     * Update the datasource with a new array of data. If the array reference
     * is the same as the previous one, it doesn't trigger an update.
     * @param {?} data Data to update the table datasource.
     * @param {?=} options Specify options to update the datasource.
     * If emitEvent is true and the datasource is updated, it emits an event
     * from 'datasourceSubject' with the updated data. If false, it doesn't
     * emit an event. True by default.
     * @return {?}
     */
    updateDatasource(data, options = { emitEvent: true }) {
        if (this.currentData !== data) {
            this.currentData = data;
            this.rowsSubject.next(this.getRowsFromData(data));
            if (options.emitEvent)
                this.datasourceSubject.next(data);
        }
    }
    /**
     * Checks the existance of the a new row (not yet saved).
     * @param {?} source
     * @return {?}
     */
    existsNewElement(source) {
        return !(source.length == 0 || source[this.getNewRowIndex(source)].id > -1);
    }
    /**
     * Returns the possible index of the new row depending on the insertion type.
     * It doesn't imply that the new row is created, that must be checked.
     * @param {?} source
     * @return {?}
     */
    getNewRowIndex(source) {
        if (this.config.prependNewElements)
            return 0;
        else
            return source.length - 1;
    }
    /**
     * Returns the row id from the index specified. It does
     * not consider if the new row is present or not, assumes
     * that new row is not present.
     * @param {?} index Index of the array.
     * @param {?} count Quantity of elements in the array.
     * @return {?}
     */
    getRowIdFromIndex(index, count) {
        if (this.config.prependNewElements)
            return count - 1 - index;
        else
            return index;
    }
    /**
     * Returns the index from the row id specified.
     * It takes into account if the new row exists or not.
     * @param {?} id
     * @param {?} source
     * @return {?}
     */
    getIndexFromRowId(id, source) {
        if (id == -1) {
            return this.existsNewElement(source) ? this.getNewRowIndex(source) : -1;
        }
        else {
            if (this.config.prependNewElements)
                return source.length - 1 - id;
            else
                return id;
        }
    }
    /**
     * Update rows ids in the array specified, starting in the specified index
     * until the start/end of the array, depending on config.prependNewElements
     * configuration.
     * @param {?} initialIndex Initial index of source to be updated.
     * @param {?} source Array that contains the rows to be updated.
     * @return {?}
     */
    updateRowIds(initialIndex, source) {
        const /** @type {?} */ delta = this.config.prependNewElements ? -1 : 1;
        for (let /** @type {?} */ index = initialIndex; index < source.length && index >= 0; index += delta) {
            if (source[index].id != -1)
                source[index].id = this.getRowIdFromIndex(index, source.length);
        }
    }
    /**
     * Get the data from the rows.
     * @param {?} rows Rows to extract the data.
     * @return {?}
     */
    getDataFromRows(rows) {
        return rows
            .filter(row => row.id != -1)
            .map((row) => {
            return row.originalData ? row.originalData : row.currentData;
        });
    }
    /**
     * Update the datasource with the data contained in the specified rows.
     * @param {?} rows Rows that contains the datasource's new data.
     * @return {?}
     */
    updateDatasourceFromRows(rows) {
        this.currentData = this.getDataFromRows(rows);
        this.datasourceSubject.next(this.currentData);
    }
    /**
     * From an array of data, it returns rows containing the original data.
     * @param {?} arrayData Data from which create the rows.
     * @return {?}
     */
    getRowsFromData(arrayData) {
        return arrayData.map((data, index) => {
            return new TableElement({
                id: this.getRowIdFromIndex(index, arrayData.length),
                editing: false,
                currentData: data,
                source: this,
                validator: this.validatorService.getRowValidator(),
            });
        });
    }
    /**
     * Create a new object with identical structure than the table source data.
     * It uses the object's type contructor if available, otherwise it creates
     * an object with the same keys of the first element contained in the original
     * datasource (used in the constructor).
     * @return {?}
     */
    createNewObject() {
        if (this.dataConstructor)
            return new this.dataConstructor();
        else {
            return this.dataKeys.reduce((obj, key) => {
                obj[key] = undefined;
                return obj;
            }, {});
        }
    }
    /**
     * Connect function called by the table to retrieve one stream containing
     *  the data to render.
     * @return {?}
     */
    connect() {
        return this.rowsSubject.asObservable();
    }
    /**
     * @return {?}
     */
    disconnect() { }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class ValidatorService {
}
ValidatorService.decorators = [
    { type: Injectable },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { TableDataSource, DefaultValidatorService, TableElement, ValidatorService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,