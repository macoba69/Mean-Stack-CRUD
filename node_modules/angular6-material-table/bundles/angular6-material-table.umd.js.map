{"version":3,"file":"angular6-material-table.umd.js.map","sources":["ng://angular6-material-table/lib/angular6-material-table-element.ts","ng://angular6-material-table/lib/angular6-material-table-default-validator.service.ts","ng://angular6-material-table/lib/angular6-material-table-data-source.ts","ng://angular6-material-table/lib/angular6-material-table-validator.service.ts"],"sourcesContent":["import {FormGroup} from '@angular/forms';\r\n\r\nimport {TableDataSource} from './angular6-material-table-data-source';\r\n\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nexport class TableElement<T> {\r\n  id: number;\r\n  editing: boolean;\r\n  private _currentData?: T;\r\n  originalData: T;\r\n  source: TableDataSource<T>;\r\n  validator: FormGroup;\r\n  get currentData() {\r\n    //express hack\r\n    if (this.validator) {\r\n      return Object.assign(this._currentData, this.validator.getRawValue());\r\n    } else {\r\n      return this._currentData;\r\n    }\r\n  }\r\n\r\n  set currentData(value) {\r\n    this._currentData = value;\r\n    this.fillValidatorFromData();\r\n  }\r\n\r\n  constructor(init: Partial<TableElement<T>>) {\r\n    Object.assign(this, init);\r\n    this.fillValidatorFromData();\r\n    if (this.validator) {\r\n      if (this.editing) {\r\n        this.validator.enable();\r\n      } else {\r\n        this.validator.disable();\r\n      }\r\n    }\r\n  }\r\n\r\n  fillValidatorFromData(): void {\r\n    if (this.validator) {\r\n      let formData = {};\r\n      for (let key in this.validator.controls) {\r\n        formData[key] = this._currentData[key];\r\n      }\r\n      this.validator.setValue(formData);\r\n    }\r\n  }\r\n\r\n  delete(): void {\r\n    this.source.delete(this.id);\r\n  }\r\n\r\n  confirmEditCreate(): boolean {\r\n    this.originalData = undefined;\r\n    if (this.id == -1)\r\n      return this.source.confirmCreate(this);\r\n    else\r\n      return this.source.confirmEdit(this);\r\n  }\r\n\r\n  startEdit(): void {\r\n    this.originalData = cloneDeep(this.currentData);\r\n    this.editing = true;\r\n    this.validator.enable();\r\n  }\r\n\r\n  cancelOrDelete(): void {\r\n    if (this.id == -1 || !this.editing)\r\n      this.delete();\r\n    else {\r\n      this.currentData = this.originalData;\r\n      this.editing = false;\r\n      this.validator.disable();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nimport { ValidatorService } from './angular6-material-table-validator.service';\r\n\r\n@Injectable()\r\nexport class DefaultValidatorService implements ValidatorService {\r\n\r\n  getRowValidator(): FormGroup {\r\n    return new FormGroup({});\r\n  }\r\n}\r\n","import {DataSource} from '@angular/cdk/collections';\r\n\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\n\r\nimport {TableElement} from './angular6-material-table-element';\r\nimport {ValidatorService} from './angular6-material-table-validator.service';\r\nimport {DefaultValidatorService} from './angular6-material-table-default-validator.service';\r\n\r\n\r\nexport class TableDataSource<T> extends DataSource<TableElement<T>> {\r\n\r\n  private rowsSubject: BehaviorSubject<TableElement<T>[]>;\r\n  datasourceSubject: Subject<T[]>;\r\n\r\n  private dataConstructor: new () => T;\r\n  private dataKeys: any[];\r\n\r\n  private currentData: any;\r\n\r\n  /**\r\n   * Creates a new TableDataSource instance, that can be used as datasource of `@angular/cdk` data-table.\r\n   * @param data Array containing the initial values for the TableDataSource. If not specified, then `dataType` must be specified.\r\n   * @param dataType Type of data contained by the Table. If not specified, then `data` with at least one element must be specified.\r\n   * @param validatorService Service that create instances of the FormGroup used to validate row fields.\r\n   * @param config Additional configuration for table.\r\n   */\r\n  constructor(\r\n    data: T[],\r\n    dataType?: new () => T,\r\n    private validatorService?: ValidatorService,\r\n    private config = { prependNewElements: false })\r\n  {\r\n    super();\r\n\r\n    if (!validatorService)\r\n      this.validatorService = new DefaultValidatorService();\r\n\r\n    if (dataType) {\r\n      this.dataConstructor = dataType;\r\n    } else {\r\n      if (data && data.length > 0)\r\n        this.dataKeys = Object.keys(data[0]);\r\n      else\r\n        throw new Error('You must define either a non empty array, or an associated class to build the table.');\r\n    }\r\n\r\n    this.rowsSubject = new BehaviorSubject(this.getRowsFromData(data));\r\n    this.datasourceSubject = new Subject<T[]>();\r\n  }\r\n\r\n  /**\r\n   * Start the creation of a new element, pushing an empty-data row in the table.\r\n   */\r\n  createNew(): void {\r\n    const source = this.rowsSubject.getValue();\r\n\r\n    if (!this.existsNewElement(source)) {\r\n\r\n      const newElement = new TableElement({\r\n        id: -1,\r\n        editing: true,\r\n        currentData: this.createNewObject(),\r\n        source: this,\r\n        validator: this.validatorService.getRowValidator(),\r\n      });\r\n\r\n      if (this.config.prependNewElements) {\r\n        this.rowsSubject.next([newElement].concat(source));\r\n      } else {\r\n        source.push(newElement);\r\n        this.rowsSubject.next(source);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirm creation of the row. Save changes and disable editing.\r\n   * If validation active and row data is invalid, it doesn't confirm creation neither disable editing.\r\n   * @param row Row to be confirmed.\r\n   */\r\n  confirmCreate(row: TableElement<T>): boolean {\r\n    if (!row.validator.valid) {\r\n      return false\r\n    }\r\n\r\n    const source = this.rowsSubject.getValue();\r\n    row.id = source.length - 1;\r\n    this.rowsSubject.next(source);\r\n\r\n    row.editing = false;\r\n    row.validator.disable();\r\n\r\n    this.updateDatasourceFromRows(source);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Confirm edition of the row. Save changes and disable editing.\r\n   * If validation active and row data is invalid, it doesn't confirm editing neither disable editing.\r\n   * @param row Row to be edited.\r\n   */\r\n  confirmEdit(row: TableElement<T>): boolean {\r\n    if (!row.validator.valid) {\r\n      return false;\r\n    }\r\n\r\n    const source = this.rowsSubject.getValue();\r\n    const index = this.getIndexFromRowId(row.id, source);\r\n\r\n    source[index] = row;\r\n    this.rowsSubject.next(source);\r\n\r\n    row.editing = false;\r\n    row.validator.disable();\r\n\r\n    this.updateDatasourceFromRows(source);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Delete the row with the index specified.\r\n   */\r\n  delete(id: number): void {\r\n    const source = this.rowsSubject.getValue();\r\n    const index = this.getIndexFromRowId(id, source);\r\n\r\n    source.splice(index, 1);\r\n    this.updateRowIds(index, source);\r\n\r\n    this.rowsSubject.next(source);\r\n\r\n    if (id != -1)\r\n      this.updateDatasourceFromRows(source);\r\n  }\r\n\r\n  /**\r\n * Get row from the table.\r\n * @param id Id of the row to retrieve, -1 returns the current new line.\r\n */\r\n  getRow(id: number): TableElement<T> {\r\n    const source = this.rowsSubject.getValue();\r\n    const index = this.getIndexFromRowId(id, source);\r\n\r\n    return (index >= 0 && index < source.length) ? source[index] : null;\r\n  }\r\n\r\n  /**\r\n   * Update the datasource with a new array of data. If the array reference\r\n   * is the same as the previous one, it doesn't trigger an update.\r\n   * @param data Data to update the table datasource.\r\n   * @param options Specify options to update the datasource.\r\n   * If emitEvent is true and the datasource is updated, it emits an event\r\n   * from 'datasourceSubject' with the updated data. If false, it doesn't\r\n   * emit an event. True by default.\r\n   */\r\n  updateDatasource(data: T[], options = { emitEvent: true }): void {\r\n    if (this.currentData !== data) {\r\n      this.currentData = data;\r\n      this.rowsSubject.next(this.getRowsFromData(data))\r\n\r\n      if (options.emitEvent)\r\n        this.datasourceSubject.next(data);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Checks the existance of the a new row (not yet saved).\r\n   * @param source\r\n   */\r\n  private existsNewElement(source: TableElement<T>[]): boolean {\r\n      return !(source.length == 0 || source[this.getNewRowIndex(source)].id > -1)\r\n  }\r\n\r\n  /**\r\n   * Returns the possible index of the new row depending on the insertion type.\r\n   * It doesn't imply that the new row is created, that must be checked.\r\n   * @param source\r\n   */\r\n  private getNewRowIndex(source): number {\r\n    if (this.config.prependNewElements)\r\n      return 0;\r\n    else\r\n      return source.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the row id from the index specified. It does\r\n   * not consider if the new row is present or not, assumes\r\n   * that new row is not present.\r\n   * @param index Index of the array.\r\n   * @param count Quantity of elements in the array.\r\n   */\r\n  private getRowIdFromIndex(index: number, count: number): number {\r\n    if (this.config.prependNewElements)\r\n      return count - 1 - index;\r\n    else\r\n      return index;\r\n  }\r\n\r\n  /**\r\n   * Returns the index from the row id specified.\r\n   * It takes into account if the new row exists or not.\r\n   * @param id\r\n   * @param source\r\n   */\r\n  private getIndexFromRowId(id: number, source: TableElement<T>[]): number {\r\n    if(id == -1) {\r\n      return this.existsNewElement(source) ? this.getNewRowIndex(source) : -1;\r\n    } else {\r\n      if (this.config.prependNewElements)\r\n          return source.length - 1 - id;\r\n      else\r\n        return id;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update rows ids in the array specified, starting in the specified index\r\n   * until the start/end of the array, depending on config.prependNewElements\r\n   * configuration.\r\n   * @param initialIndex Initial index of source to be updated.\r\n   * @param source Array that contains the rows to be updated.\r\n   */\r\n  private updateRowIds(initialIndex: number, source: TableElement<T>[]): void {\r\n\r\n    const delta = this.config.prependNewElements ? -1 : 1;\r\n\r\n    for (let index = initialIndex; index < source.length && index >= 0; index += delta) {\r\n      if (source[index].id != -1)\r\n        source[index].id = this.getRowIdFromIndex(index, source.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the data from the rows.\r\n   * @param rows Rows to extract the data.\r\n   */\r\n  private getDataFromRows(rows: TableElement<T>[]): T[] {\r\n    return rows\r\n      .filter(row => row.id != -1)\r\n      .map<T>((row) => {\r\n      return row.originalData ? row.originalData : row.currentData;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the datasource with the data contained in the specified rows.\r\n   * @param rows Rows that contains the datasource's new data.\r\n   */\r\n  private updateDatasourceFromRows(rows: TableElement<T>[]): void {\r\n    this.currentData = this.getDataFromRows(rows);\r\n    this.datasourceSubject.next(this.currentData);\r\n  }\r\n\r\n  /**\r\n   * From an array of data, it returns rows containing the original data.\r\n   * @param arrayData Data from which create the rows.\r\n   */\r\n  private getRowsFromData(arrayData: T[]): TableElement<T>[] {\r\n    return arrayData.map<TableElement<T>>((data, index) => {\r\n      return new TableElement({\r\n        id: this.getRowIdFromIndex(index, arrayData.length),\r\n        editing: false,\r\n        currentData: data,\r\n        source: this,\r\n        validator: this.validatorService.getRowValidator(),\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a new object with identical structure than the table source data.\r\n   * It uses the object's type contructor if available, otherwise it creates\r\n   * an object with the same keys of the first element contained in the original\r\n   * datasource (used in the constructor).\r\n   */\r\n  private createNewObject(): T {\r\n    if (this.dataConstructor)\r\n      return new this.dataConstructor();\r\n    else {\r\n      return this.dataKeys.reduce((obj, key) => {\r\n        obj[key] = undefined;\r\n        return obj;\r\n      }, {});\r\n    }\r\n\r\n  }\r\n\r\n  /** Connect function called by the table to retrieve one stream containing\r\n   *  the data to render. */\r\n  connect(): Observable<TableElement<T>[]> {\r\n    return this.rowsSubject.asObservable();\r\n  }\r\n\r\n  disconnect() { }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport abstract class ValidatorService {\r\n  abstract getRowValidator(): FormGroup;\r\n}\r\n"],"names":["FormGroup","Injectable","tslib_1.__extends","BehaviorSubject","Subject","DataSource"],"mappings":"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"}
