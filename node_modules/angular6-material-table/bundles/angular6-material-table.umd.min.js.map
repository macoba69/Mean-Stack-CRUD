{"version":3,"sources":["ng://angular6-material-table/lib/angular6-material-table-element.ts","ng://angular6-material-table/lib/angular6-material-table-default-validator.service.ts","ng://angular6-material-table/lib/angular6-material-table-data-source.ts","ng://angular6-material-table/lib/angular6-material-table-validator.service.ts"],"names":["TableElement","init","Object","assign","this","fillValidatorFromData","validator","editing","enable","disable","defineProperty","prototype","_currentData","getRawValue","value","formData","key","controls","setValue","delete","source","id","confirmEditCreate","originalData","undefined","confirmCreate","confirmEdit","startEdit","cloneDeep","currentData","cancelOrDelete","DefaultValidatorService","getRowValidator","FormGroup","Injectable","TableDataSource","_super","data","dataType","validatorService","config","prependNewElements","_this","call","dataConstructor","length","Error","dataKeys","keys","rowsSubject","BehaviorSubject","getRowsFromData","datasourceSubject","Subject","tslib_1.__extends","createNew","getValue","existsNewElement","newElement","createNewObject","next","concat","push","row","valid","updateDatasourceFromRows","getIndexFromRowId","index","splice","updateRowIds","getRow","updateDatasource","options","emitEvent","getNewRowIndex","getRowIdFromIndex","count","initialIndex","delta","getDataFromRows","rows","filter","map","arrayData","reduce","obj","connect","asObservable","disconnect","DataSource"],"mappings":"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","sourcesContent":["import {FormGroup} from '@angular/forms';\r\n\r\nimport {TableDataSource} from './angular6-material-table-data-source';\r\n\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nexport class TableElement<T> {\r\n  id: number;\r\n  editing: boolean;\r\n  private _currentData?: T;\r\n  originalData: T;\r\n  source: TableDataSource<T>;\r\n  validator: FormGroup;\r\n  get currentData() {\r\n    //express hack\r\n    if (this.validator) {\r\n      return Object.assign(this._currentData, this.validator.getRawValue());\r\n    } else {\r\n      return this._currentData;\r\n    }\r\n  }\r\n\r\n  set currentData(value) {\r\n    this._currentData = value;\r\n    this.fillValidatorFromData();\r\n  }\r\n\r\n  constructor(init: Partial<TableElement<T>>) {\r\n    Object.assign(this, init);\r\n    this.fillValidatorFromData();\r\n    if (this.validator) {\r\n      if (this.editing) {\r\n        this.validator.enable();\r\n      } else {\r\n        this.validator.disable();\r\n      }\r\n    }\r\n  }\r\n\r\n  fillValidatorFromData(): void {\r\n    if (this.validator) {\r\n      let formData = {};\r\n      for (let key in this.validator.controls) {\r\n        formData[key] = this._currentData[key];\r\n      }\r\n      this.validator.setValue(formData);\r\n    }\r\n  }\r\n\r\n  delete(): void {\r\n    this.source.delete(this.id);\r\n  }\r\n\r\n  confirmEditCreate(): boolean {\r\n    this.originalData = undefined;\r\n    if (this.id == -1)\r\n      return this.source.confirmCreate(this);\r\n    else\r\n      return this.source.confirmEdit(this);\r\n  }\r\n\r\n  startEdit(): void {\r\n    this.originalData = cloneDeep(this.currentData);\r\n    this.editing = true;\r\n    this.validator.enable();\r\n  }\r\n\r\n  cancelOrDelete(): void {\r\n    if (this.id == -1 || !this.editing)\r\n      this.delete();\r\n    else {\r\n      this.currentData = this.originalData;\r\n      this.editing = false;\r\n      this.validator.disable();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nimport { ValidatorService } from './angular6-material-table-validator.service';\r\n\r\n@Injectable()\r\nexport class DefaultValidatorService implements ValidatorService {\r\n\r\n  getRowValidator(): FormGroup {\r\n    return new FormGroup({});\r\n  }\r\n}\r\n","import {DataSource} from '@angular/cdk/collections';\r\n\r\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\r\n\r\nimport {TableElement} from './angular6-material-table-element';\r\nimport {ValidatorService} from './angular6-material-table-validator.service';\r\nimport {DefaultValidatorService} from './angular6-material-table-default-validator.service';\r\n\r\n\r\nexport class TableDataSource<T> extends DataSource<TableElement<T>> {\r\n\r\n  private rowsSubject: BehaviorSubject<TableElement<T>[]>;\r\n  datasourceSubject: Subject<T[]>;\r\n\r\n  private dataConstructor: new () => T;\r\n  private dataKeys: any[];\r\n\r\n  private currentData: any;\r\n\r\n  /**\r\n   * Creates a new TableDataSource instance, that can be used as datasource of `@angular/cdk` data-table.\r\n   * @param data Array containing the initial values for the TableDataSource. If not specified, then `dataType` must be specified.\r\n   * @param dataType Type of data contained by the Table. If not specified, then `data` with at least one element must be specified.\r\n   * @param validatorService Service that create instances of the FormGroup used to validate row fields.\r\n   * @param config Additional configuration for table.\r\n   */\r\n  constructor(\r\n    data: T[],\r\n    dataType?: new () => T,\r\n    private validatorService?: ValidatorService,\r\n    private config = { prependNewElements: false })\r\n  {\r\n    super();\r\n\r\n    if (!validatorService)\r\n      this.validatorService = new DefaultValidatorService();\r\n\r\n    if (dataType) {\r\n      this.dataConstructor = dataType;\r\n    } else {\r\n      if (data && data.length > 0)\r\n        this.dataKeys = Object.keys(data[0]);\r\n      else\r\n        throw new Error('You must define either a non empty array, or an associated class to build the table.');\r\n    }\r\n\r\n    this.rowsSubject = new BehaviorSubject(this.getRowsFromData(data));\r\n    this.datasourceSubject = new Subject<T[]>();\r\n  }\r\n\r\n  /**\r\n   * Start the creation of a new element, pushing an empty-data row in the table.\r\n   */\r\n  createNew(): void {\r\n    const source = this.rowsSubject.getValue();\r\n\r\n    if (!this.existsNewElement(source)) {\r\n\r\n      const newElement = new TableElement({\r\n        id: -1,\r\n        editing: true,\r\n        currentData: this.createNewObject(),\r\n        source: this,\r\n        validator: this.validatorService.getRowValidator(),\r\n      });\r\n\r\n      if (this.config.prependNewElements) {\r\n        this.rowsSubject.next([newElement].concat(source));\r\n      } else {\r\n        source.push(newElement);\r\n        this.rowsSubject.next(source);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Confirm creation of the row. Save changes and disable editing.\r\n   * If validation active and row data is invalid, it doesn't confirm creation neither disable editing.\r\n   * @param row Row to be confirmed.\r\n   */\r\n  confirmCreate(row: TableElement<T>): boolean {\r\n    if (!row.validator.valid) {\r\n      return false\r\n    }\r\n\r\n    const source = this.rowsSubject.getValue();\r\n    row.id = source.length - 1;\r\n    this.rowsSubject.next(source);\r\n\r\n    row.editing = false;\r\n    row.validator.disable();\r\n\r\n    this.updateDatasourceFromRows(source);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Confirm edition of the row. Save changes and disable editing.\r\n   * If validation active and row data is invalid, it doesn't confirm editing neither disable editing.\r\n   * @param row Row to be edited.\r\n   */\r\n  confirmEdit(row: TableElement<T>): boolean {\r\n    if (!row.validator.valid) {\r\n      return false;\r\n    }\r\n\r\n    const source = this.rowsSubject.getValue();\r\n    const index = this.getIndexFromRowId(row.id, source);\r\n\r\n    source[index] = row;\r\n    this.rowsSubject.next(source);\r\n\r\n    row.editing = false;\r\n    row.validator.disable();\r\n\r\n    this.updateDatasourceFromRows(source);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Delete the row with the index specified.\r\n   */\r\n  delete(id: number): void {\r\n    const source = this.rowsSubject.getValue();\r\n    const index = this.getIndexFromRowId(id, source);\r\n\r\n    source.splice(index, 1);\r\n    this.updateRowIds(index, source);\r\n\r\n    this.rowsSubject.next(source);\r\n\r\n    if (id != -1)\r\n      this.updateDatasourceFromRows(source);\r\n  }\r\n\r\n  /**\r\n * Get row from the table.\r\n * @param id Id of the row to retrieve, -1 returns the current new line.\r\n */\r\n  getRow(id: number): TableElement<T> {\r\n    const source = this.rowsSubject.getValue();\r\n    const index = this.getIndexFromRowId(id, source);\r\n\r\n    return (index >= 0 && index < source.length) ? source[index] : null;\r\n  }\r\n\r\n  /**\r\n   * Update the datasource with a new array of data. If the array reference\r\n   * is the same as the previous one, it doesn't trigger an update.\r\n   * @param data Data to update the table datasource.\r\n   * @param options Specify options to update the datasource.\r\n   * If emitEvent is true and the datasource is updated, it emits an event\r\n   * from 'datasourceSubject' with the updated data. If false, it doesn't\r\n   * emit an event. True by default.\r\n   */\r\n  updateDatasource(data: T[], options = { emitEvent: true }): void {\r\n    if (this.currentData !== data) {\r\n      this.currentData = data;\r\n      this.rowsSubject.next(this.getRowsFromData(data))\r\n\r\n      if (options.emitEvent)\r\n        this.datasourceSubject.next(data);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Checks the existance of the a new row (not yet saved).\r\n   * @param source\r\n   */\r\n  private existsNewElement(source: TableElement<T>[]): boolean {\r\n      return !(source.length == 0 || source[this.getNewRowIndex(source)].id > -1)\r\n  }\r\n\r\n  /**\r\n   * Returns the possible index of the new row depending on the insertion type.\r\n   * It doesn't imply that the new row is created, that must be checked.\r\n   * @param source\r\n   */\r\n  private getNewRowIndex(source): number {\r\n    if (this.config.prependNewElements)\r\n      return 0;\r\n    else\r\n      return source.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the row id from the index specified. It does\r\n   * not consider if the new row is present or not, assumes\r\n   * that new row is not present.\r\n   * @param index Index of the array.\r\n   * @param count Quantity of elements in the array.\r\n   */\r\n  private getRowIdFromIndex(index: number, count: number): number {\r\n    if (this.config.prependNewElements)\r\n      return count - 1 - index;\r\n    else\r\n      return index;\r\n  }\r\n\r\n  /**\r\n   * Returns the index from the row id specified.\r\n   * It takes into account if the new row exists or not.\r\n   * @param id\r\n   * @param source\r\n   */\r\n  private getIndexFromRowId(id: number, source: TableElement<T>[]): number {\r\n    if(id == -1) {\r\n      return this.existsNewElement(source) ? this.getNewRowIndex(source) : -1;\r\n    } else {\r\n      if (this.config.prependNewElements)\r\n          return source.length - 1 - id;\r\n      else\r\n        return id;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update rows ids in the array specified, starting in the specified index\r\n   * until the start/end of the array, depending on config.prependNewElements\r\n   * configuration.\r\n   * @param initialIndex Initial index of source to be updated.\r\n   * @param source Array that contains the rows to be updated.\r\n   */\r\n  private updateRowIds(initialIndex: number, source: TableElement<T>[]): void {\r\n\r\n    const delta = this.config.prependNewElements ? -1 : 1;\r\n\r\n    for (let index = initialIndex; index < source.length && index >= 0; index += delta) {\r\n      if (source[index].id != -1)\r\n        source[index].id = this.getRowIdFromIndex(index, source.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the data from the rows.\r\n   * @param rows Rows to extract the data.\r\n   */\r\n  private getDataFromRows(rows: TableElement<T>[]): T[] {\r\n    return rows\r\n      .filter(row => row.id != -1)\r\n      .map<T>((row) => {\r\n      return row.originalData ? row.originalData : row.currentData;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the datasource with the data contained in the specified rows.\r\n   * @param rows Rows that contains the datasource's new data.\r\n   */\r\n  private updateDatasourceFromRows(rows: TableElement<T>[]): void {\r\n    this.currentData = this.getDataFromRows(rows);\r\n    this.datasourceSubject.next(this.currentData);\r\n  }\r\n\r\n  /**\r\n   * From an array of data, it returns rows containing the original data.\r\n   * @param arrayData Data from which create the rows.\r\n   */\r\n  private getRowsFromData(arrayData: T[]): TableElement<T>[] {\r\n    return arrayData.map<TableElement<T>>((data, index) => {\r\n      return new TableElement({\r\n        id: this.getRowIdFromIndex(index, arrayData.length),\r\n        editing: false,\r\n        currentData: data,\r\n        source: this,\r\n        validator: this.validatorService.getRowValidator(),\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a new object with identical structure than the table source data.\r\n   * It uses the object's type contructor if available, otherwise it creates\r\n   * an object with the same keys of the first element contained in the original\r\n   * datasource (used in the constructor).\r\n   */\r\n  private createNewObject(): T {\r\n    if (this.dataConstructor)\r\n      return new this.dataConstructor();\r\n    else {\r\n      return this.dataKeys.reduce((obj, key) => {\r\n        obj[key] = undefined;\r\n        return obj;\r\n      }, {});\r\n    }\r\n\r\n  }\r\n\r\n  /** Connect function called by the table to retrieve one stream containing\r\n   *  the data to render. */\r\n  connect(): Observable<TableElement<T>[]> {\r\n    return this.rowsSubject.asObservable();\r\n  }\r\n\r\n  disconnect() { }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport abstract class ValidatorService {\r\n  abstract getRowValidator(): FormGroup;\r\n}\r\n"]}