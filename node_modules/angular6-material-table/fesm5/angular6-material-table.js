import cloneDeep from 'lodash.clonedeep';
import { Injectable } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { __extends } from 'tslib';
import { DataSource } from '@angular/cdk/collections';
import { BehaviorSubject, Subject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
var  /**
 * @template T
 */
TableElement = /** @class */ (function () {
    function TableElement(init) {
        Object.assign(this, init);
        this.fillValidatorFromData();
        if (this.validator) {
            if (this.editing) {
                this.validator.enable();
            }
            else {
                this.validator.disable();
            }
        }
    }
    Object.defineProperty(TableElement.prototype, "currentData", {
        get: /**
         * @return {?}
         */
        function () {
            //express hack
            if (this.validator) {
                return Object.assign(this._currentData, this.validator.getRawValue());
            }
            else {
                return this._currentData;
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._currentData = value;
            this.fillValidatorFromData();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TableElement.prototype.fillValidatorFromData = /**
     * @return {?}
     */
    function () {
        if (this.validator) {
            var /** @type {?} */ formData = {};
            for (var /** @type {?} */ key in this.validator.controls) {
                formData[key] = this._currentData[key];
            }
            this.validator.setValue(formData);
        }
    };
    /**
     * @return {?}
     */
    TableElement.prototype.delete = /**
     * @return {?}
     */
    function () {
        this.source.delete(this.id);
    };
    /**
     * @return {?}
     */
    TableElement.prototype.confirmEditCreate = /**
     * @return {?}
     */
    function () {
        this.originalData = undefined;
        if (this.id == -1)
            return this.source.confirmCreate(this);
        else
            return this.source.confirmEdit(this);
    };
    /**
     * @return {?}
     */
    TableElement.prototype.startEdit = /**
     * @return {?}
     */
    function () {
        this.originalData = cloneDeep(this.currentData);
        this.editing = true;
        this.validator.enable();
    };
    /**
     * @return {?}
     */
    TableElement.prototype.cancelOrDelete = /**
     * @return {?}
     */
    function () {
        if (this.id == -1 || !this.editing)
            this.delete();
        else {
            this.currentData = this.originalData;
            this.editing = false;
            this.validator.disable();
        }
    };
    return TableElement;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DefaultValidatorService = /** @class */ (function () {
    function DefaultValidatorService() {
    }
    /**
     * @return {?}
     */
    DefaultValidatorService.prototype.getRowValidator = /**
     * @return {?}
     */
    function () {
        return new FormGroup({});
    };
    DefaultValidatorService.decorators = [
        { type: Injectable },
    ];
    return DefaultValidatorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
var  /**
 * @template T
 */
TableDataSource = /** @class */ (function (_super) {
    __extends(TableDataSource, _super);
    /**
     * Creates a new TableDataSource instance, that can be used as datasource of `@angular/cdk` data-table.
     * @param data Array containing the initial values for the TableDataSource. If not specified, then `dataType` must be specified.
     * @param dataType Type of data contained by the Table. If not specified, then `data` with at least one element must be specified.
     * @param validatorService Service that create instances of the FormGroup used to validate row fields.
     * @param config Additional configuration for table.
     */
    function TableDataSource(data, dataType, validatorService, config) {
        if (config === void 0) { config = { prependNewElements: false }; }
        var _this = _super.call(this) || this;
        _this.validatorService = validatorService;
        _this.config = config;
        if (!validatorService)
            _this.validatorService = new DefaultValidatorService();
        if (dataType) {
            _this.dataConstructor = dataType;
        }
        else {
            if (data && data.length > 0)
                _this.dataKeys = Object.keys(data[0]);
            else
                throw new Error('You must define either a non empty array, or an associated class to build the table.');
        }
        _this.rowsSubject = new BehaviorSubject(_this.getRowsFromData(data));
        _this.datasourceSubject = new Subject();
        return _this;
    }
    /**
     * Start the creation of a new element, pushing an empty-data row in the table.
     */
    /**
     * Start the creation of a new element, pushing an empty-data row in the table.
     * @return {?}
     */
    TableDataSource.prototype.createNew = /**
     * Start the creation of a new element, pushing an empty-data row in the table.
     * @return {?}
     */
    function () {
        var /** @type {?} */ source = this.rowsSubject.getValue();
        if (!this.existsNewElement(source)) {
            var /** @type {?} */ newElement = new TableElement({
                id: -1,
                editing: true,
                currentData: this.createNewObject(),
                source: this,
                validator: this.validatorService.getRowValidator(),
            });
            if (this.config.prependNewElements) {
                this.rowsSubject.next([newElement].concat(source));
            }
            else {
                source.push(newElement);
                this.rowsSubject.next(source);
            }
        }
    };
    /**
     * Confirm creation of the row. Save changes and disable editing.
     * If validation active and row data is invalid, it doesn't confirm creation neither disable editing.
     * @param row Row to be confirmed.
     */
    /**
     * Confirm creation of the row. Save changes and disable editing.
     * If validation active and row data is invalid, it doesn't confirm creation neither disable editing.
     * @param {?} row Row to be confirmed.
     * @return {?}
     */
    TableDataSource.prototype.confirmCreate = /**
     * Confirm creation of the row. Save changes and disable editing.
     * If validation active and row data is invalid, it doesn't confirm creation neither disable editing.
     * @param {?} row Row to be confirmed.
     * @return {?}
     */
    function (row) {
        if (!row.validator.valid) {
            return false;
        }
        var /** @type {?} */ source = this.rowsSubject.getValue();
        row.id = source.length - 1;
        this.rowsSubject.next(source);
        row.editing = false;
        row.validator.disable();
        this.updateDatasourceFromRows(source);
        return true;
    };
    /**
     * Confirm edition of the row. Save changes and disable editing.
     * If validation active and row data is invalid, it doesn't confirm editing neither disable editing.
     * @param row Row to be edited.
     */
    /**
     * Confirm edition of the row. Save changes and disable editing.
     * If validation active and row data is invalid, it doesn't confirm editing neither disable editing.
     * @param {?} row Row to be edited.
     * @return {?}
     */
    TableDataSource.prototype.confirmEdit = /**
     * Confirm edition of the row. Save changes and disable editing.
     * If validation active and row data is invalid, it doesn't confirm editing neither disable editing.
     * @param {?} row Row to be edited.
     * @return {?}
     */
    function (row) {
        if (!row.validator.valid) {
            return false;
        }
        var /** @type {?} */ source = this.rowsSubject.getValue();
        var /** @type {?} */ index = this.getIndexFromRowId(row.id, source);
        source[index] = row;
        this.rowsSubject.next(source);
        row.editing = false;
        row.validator.disable();
        this.updateDatasourceFromRows(source);
        return true;
    };
    /**
     * Delete the row with the index specified.
     */
    /**
     * Delete the row with the index specified.
     * @param {?} id
     * @return {?}
     */
    TableDataSource.prototype.delete = /**
     * Delete the row with the index specified.
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ source = this.rowsSubject.getValue();
        var /** @type {?} */ index = this.getIndexFromRowId(id, source);
        source.splice(index, 1);
        this.updateRowIds(index, source);
        this.rowsSubject.next(source);
        if (id != -1)
            this.updateDatasourceFromRows(source);
    };
    /**
   * Get row from the table.
   * @param id Id of the row to retrieve, -1 returns the current new line.
   */
    /**
     * Get row from the table.
     * @param {?} id Id of the row to retrieve, -1 returns the current new line.
     * @return {?}
     */
    TableDataSource.prototype.getRow = /**
     * Get row from the table.
     * @param {?} id Id of the row to retrieve, -1 returns the current new line.
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ source = this.rowsSubject.getValue();
        var /** @type {?} */ index = this.getIndexFromRowId(id, source);
        return (index >= 0 && index < source.length) ? source[index] : null;
    };
    /**
     * Update the datasource with a new array of data. If the array reference
     * is the same as the previous one, it doesn't trigger an update.
     * @param data Data to update the table datasource.
     * @param options Specify options to update the datasource.
     * If emitEvent is true and the datasource is updated, it emits an event
     * from 'datasourceSubject' with the updated data. If false, it doesn't
     * emit an event. True by default.
     */
    /**
     * Update the datasource with a new array of data. If the array reference
     * is the same as the previous one, it doesn't trigger an update.
     * @param {?} data Data to update the table datasource.
     * @param {?=} options Specify options to update the datasource.
     * If emitEvent is true and the datasource is updated, it emits an event
     * from 'datasourceSubject' with the updated data. If false, it doesn't
     * emit an event. True by default.
     * @return {?}
     */
    TableDataSource.prototype.updateDatasource = /**
     * Update the datasource with a new array of data. If the array reference
     * is the same as the previous one, it doesn't trigger an update.
     * @param {?} data Data to update the table datasource.
     * @param {?=} options Specify options to update the datasource.
     * If emitEvent is true and the datasource is updated, it emits an event
     * from 'datasourceSubject' with the updated data. If false, it doesn't
     * emit an event. True by default.
     * @return {?}
     */
    function (data, options) {
        if (options === void 0) { options = { emitEvent: true }; }
        if (this.currentData !== data) {
            this.currentData = data;
            this.rowsSubject.next(this.getRowsFromData(data));
            if (options.emitEvent)
                this.datasourceSubject.next(data);
        }
    };
    /**
     * Checks the existance of the a new row (not yet saved).
     * @param {?} source
     * @return {?}
     */
    TableDataSource.prototype.existsNewElement = /**
     * Checks the existance of the a new row (not yet saved).
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return !(source.length == 0 || source[this.getNewRowIndex(source)].id > -1);
    };
    /**
     * Returns the possible index of the new row depending on the insertion type.
     * It doesn't imply that the new row is created, that must be checked.
     * @param {?} source
     * @return {?}
     */
    TableDataSource.prototype.getNewRowIndex = /**
     * Returns the possible index of the new row depending on the insertion type.
     * It doesn't imply that the new row is created, that must be checked.
     * @param {?} source
     * @return {?}
     */
    function (source) {
        if (this.config.prependNewElements)
            return 0;
        else
            return source.length - 1;
    };
    /**
     * Returns the row id from the index specified. It does
     * not consider if the new row is present or not, assumes
     * that new row is not present.
     * @param {?} index Index of the array.
     * @param {?} count Quantity of elements in the array.
     * @return {?}
     */
    TableDataSource.prototype.getRowIdFromIndex = /**
     * Returns the row id from the index specified. It does
     * not consider if the new row is present or not, assumes
     * that new row is not present.
     * @param {?} index Index of the array.
     * @param {?} count Quantity of elements in the array.
     * @return {?}
     */
    function (index, count) {
        if (this.config.prependNewElements)
            return count - 1 - index;
        else
            return index;
    };
    /**
     * Returns the index from the row id specified.
     * It takes into account if the new row exists or not.
     * @param {?} id
     * @param {?} source
     * @return {?}
     */
    TableDataSource.prototype.getIndexFromRowId = /**
     * Returns the index from the row id specified.
     * It takes into account if the new row exists or not.
     * @param {?} id
     * @param {?} source
     * @return {?}
     */
    function (id, source) {
        if (id == -1) {
            return this.existsNewElement(source) ? this.getNewRowIndex(source) : -1;
        }
        else {
            if (this.config.prependNewElements)
                return source.length - 1 - id;
            else
                return id;
        }
    };
    /**
     * Update rows ids in the array specified, starting in the specified index
     * until the start/end of the array, depending on config.prependNewElements
     * configuration.
     * @param {?} initialIndex Initial index of source to be updated.
     * @param {?} source Array that contains the rows to be updated.
     * @return {?}
     */
    TableDataSource.prototype.updateRowIds = /**
     * Update rows ids in the array specified, starting in the specified index
     * until the start/end of the array, depending on config.prependNewElements
     * configuration.
     * @param {?} initialIndex Initial index of source to be updated.
     * @param {?} source Array that contains the rows to be updated.
     * @return {?}
     */
    function (initialIndex, source) {
        var /** @type {?} */ delta = this.config.prependNewElements ? -1 : 1;
        for (var /** @type {?} */ index = initialIndex; index < source.length && index >= 0; index += delta) {
            if (source[index].id != -1)
                source[index].id = this.getRowIdFromIndex(index, source.length);
        }
    };
    /**
     * Get the data from the rows.
     * @param {?} rows Rows to extract the data.
     * @return {?}
     */
    TableDataSource.prototype.getDataFromRows = /**
     * Get the data from the rows.
     * @param {?} rows Rows to extract the data.
     * @return {?}
     */
    function (rows) {
        return rows
            .filter(function (row) { return row.id != -1; })
            .map(function (row) {
            return row.originalData ? row.originalData : row.currentData;
        });
    };
    /**
     * Update the datasource with the data contained in the specified rows.
     * @param {?} rows Rows that contains the datasource's new data.
     * @return {?}
     */
    TableDataSource.prototype.updateDatasourceFromRows = /**
     * Update the datasource with the data contained in the specified rows.
     * @param {?} rows Rows that contains the datasource's new data.
     * @return {?}
     */
    function (rows) {
        this.currentData = this.getDataFromRows(rows);
        this.datasourceSubject.next(this.currentData);
    };
    /**
     * From an array of data, it returns rows containing the original data.
     * @param {?} arrayData Data from which create the rows.
     * @return {?}
     */
    TableDataSource.prototype.getRowsFromData = /**
     * From an array of data, it returns rows containing the original data.
     * @param {?} arrayData Data from which create the rows.
     * @return {?}
     */
    function (arrayData) {
        var _this = this;
        return arrayData.map(function (data, index) {
            return new TableElement({
                id: _this.getRowIdFromIndex(index, arrayData.length),
                editing: false,
                currentData: data,
                source: _this,
                validator: _this.validatorService.getRowValidator(),
            });
        });
    };
    /**
     * Create a new object with identical structure than the table source data.
     * It uses the object's type contructor if available, otherwise it creates
     * an object with the same keys of the first element contained in the original
     * datasource (used in the constructor).
     * @return {?}
     */
    TableDataSource.prototype.createNewObject = /**
     * Create a new object with identical structure than the table source data.
     * It uses the object's type contructor if available, otherwise it creates
     * an object with the same keys of the first element contained in the original
     * datasource (used in the constructor).
     * @return {?}
     */
    function () {
        if (this.dataConstructor)
            return new this.dataConstructor();
        else {
            return this.dataKeys.reduce(function (obj, key) {
                obj[key] = undefined;
                return obj;
            }, {});
        }
    };
    /** Connect function called by the table to retrieve one stream containing
     *  the data to render. */
    /**
     * Connect function called by the table to retrieve one stream containing
     *  the data to render.
     * @return {?}
     */
    TableDataSource.prototype.connect = /**
     * Connect function called by the table to retrieve one stream containing
     *  the data to render.
     * @return {?}
     */
    function () {
        return this.rowsSubject.asObservable();
    };
    /**
     * @return {?}
     */
    TableDataSource.prototype.disconnect = /**
     * @return {?}
     */
    function () { };
    return TableDataSource;
}(DataSource));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
var ValidatorService = /** @class */ (function () {
    function ValidatorService() {
    }
    ValidatorService.decorators = [
        { type: Injectable },
    ];
    return ValidatorService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { TableDataSource, DefaultValidatorService, TableElement, ValidatorService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,